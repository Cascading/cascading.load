/*
 * Copyright (c) 2007-2015 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.filters.ReplaceTokens

import java.text.SimpleDateFormat

apply plugin: 'idea'
apply plugin: 'eclipse'

apply from: 'etc/version.gradle'
apply from: 'etc/properties.gradle'
apply from: 'etc/s3Upload.gradle'

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.1'
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.1'
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'http://conjars.org/repo/' }
}

ext.cascadingVersion = '3.0.0-wip-+'

ext.hadoopVersion = '1.2.1'
ext.hadoop2Version = '2.6.0'
ext.tezVersion = '0.6.1'

ext.cascadingChanging = cascadingVersion.endsWith( '-dev' );
ext.buildDate = new SimpleDateFormat( "yyyyMMdd" ).format( new Date() )
ext.buildTimestamp = new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss" ).format( new Date() )
ext.jarName = "${project.name}-${buildDate}.jar"
ext.tarBaseName = "${project.name}-${buildDate}"
ext.finalTarName = "${tarBaseName}.tgz"

subprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: 'provided-base'
  apply plugin: 'com.github.johnrengelman.shadow'

  apply from: "${rootDir}/etc/testing.gradle"

  sourceCompatibility = 1.7
  targetCompatibility = 1.7

  repositories {
    mavenLocal()
    mavenCentral()
    maven{ url 'http://conjars.org/repo/' }
  }

  configurations {
    testArtifacts {
      extendsFrom testRuntime
    }
  }

  dependencies {
    testCompile group: 'junit', name: 'junit', version: "4.12"
  }

  test {
    exclude '**/*TestCase*'
  }

  task testsJar( type: Jar, dependsOn: testClasses ) {
    from sourceSets.test.output
    classifier = 'tests'
  }

  task testSourcesJar( type: Jar, dependsOn: classes ) {
    from sourceSets.test.allSource
    classifier = 'test-sources'
  }

  shadowJar {
    baseName = "${project.name}-${buildDate}"
    classifier = ""
    configurations = []

    from {
      project.configurations.runtime.minus( [ project.configurations.provided ] )
    }

    mergeServiceFiles()

    exclude 'LICENSE'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/LICENSE*'

    manifest {
      attributes "Main-Class": "cascading/load/Main",
              'Build-Time': "${buildTimestamp}"
    }
  }

  artifacts {
    archives shadowJar
    testArtifacts testsJar
    testArtifacts testSourcesJar
  }
}

allprojects {
  idea {
    module {
      downloadJavadoc = true
      downloadSources = true
    }
  }

  eclipse {
    classpath {
      defaultOutputDir = file( 'build' )
      downloadSources = true
      downloadJavadoc = true
    }
  }
}

task clean( type: Delete ) {
  delete "build"
}

task distCopy( type: Copy, dependsOn: subprojects.jar ) {

  into "${buildDir}/dist/load-${buildDate}"

  from 'README.md'
  from 'apl.txt'
  from( 'src/main/shell' ) { into 'bin' }

  from( project( ":load-hadoop" ).shadowJar ) { into 'platform/hadoop/' }
  from( project( ":load-hadoop2-mr1" ).shadowJar ) { into 'platform/hadoop2-mr1/' }
  from( project( ":load-hadoop2-tez" ).shadowJar ) { into 'platform/hadoop2-tez/' }
  from( project( ":load-local" ).shadowJar ) { into 'platform/local/' }
  from( "load-docs/build/asciidoc" ) { into 'docs' }
}

distCopy.dependsOn( [":load-docs:asciidoctor", subprojects.shadowJar] )

task buildTarball( type: Tar, dependsOn: distCopy ) {
  baseName = "${tarBaseName}"
  destinationDir = new File( "${s3UploadArtifacts.source}" )
  compression = Compression.GZIP
  from( "build/dist" )
}

task packageDist( dependsOn: buildTarball ) << {
  file( "${s3UploadArtifacts.source}/latest.txt" ).write( "http://${s3UploadArtifacts.destination}${finalTarName}" )
  file( "${s3UploadArtifacts.source}/latest-local-jar.txt" ).write( "http://${s3UploadArtifacts.destination}${project( 'load-local' ).shadowJar.archiveName}" )
  file( "${s3UploadArtifacts.source}/latest-hadoop-jar.txt" ).write( "http://${s3UploadArtifacts.destination}${project( 'load-hadoop' ).shadowJar.archiveName}" )
  file( "${s3UploadArtifacts.source}/latest-hadoop2-mr1-jar.txt" ).write( "http://${s3UploadArtifacts.destination}${project( 'load-hadoop2-mr1' ).shadowJar.archiveName}" )
  file( "${s3UploadArtifacts.source}/latest-hadoop2-tez-jar.txt" ).write( "http://${s3UploadArtifacts.destination}${project( 'load-hadoop2-tez' ).shadowJar.archiveName}" )

  copy {
    from( project( ":load-hadoop" ).shadowJar )
    into( "${s3UploadArtifacts.source}" )
  }
  copy {
    from( project( ":load-hadoop2-mr1" ).shadowJar )
    into( "${s3UploadArtifacts.source}" )
  }
  copy {
    from( project( ":load-hadoop2-tez" ).shadowJar )
    into( "${s3UploadArtifacts.source}" )
  }
  copy {
    from( "src/main/shell/util/install-load.sh" )
    filter( ReplaceTokens, tokens: [
            'location'    : project.s3Bucket.toString(),
            'majorVersion': majorVersion.toString()
    ] )
    into( "${s3UploadArtifacts.source}" )
  }
}
