#!/usr/bin/env bash
# Copyright 2011-2014 Concurrent, Inc.

function show_usage {
  echo "Type load -h for the full help or load --selfupdate if you want to install the latest version."
  echo ""
  echo "To set a default platform, set the LOAD_PLATFORM env variable."
}

if [ $# = 0 ]; then
  show_usage
  exit 1
fi

OPTION=$1
if [ "$OPTION" = "--selfupdate" ] ; then
  curl http://@location@/load/@majorVersion@/install-load.sh | bash
  exit $?
fi

# find the dir this is in, regardless of symlinkage. Modified from http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  BASE_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="BASE_DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
BASE_DIR="$( cd -P "$( dirname "$SOURCE" )/../" && pwd )"
BIN_DIR="$BASE_DIR/bin"
JAVA_EXEC=`which java`

PLATFORM=""
CONFIG=""
CONFIG_FILE=""

CASCADING_CONFIG_FILE=$HOME/.cascading/default.properties
LOCAL_CASCADING_CONFIG_FILE=$PWD/.cascading/default.properties

if [[ -e $LOCAL_CASCADING_CONFIG_FILE ]]; then
  CONFIG_FILE=$LOCAL_CASCADING_CONFIG_FILE
elif [[ -e $CASCADING_CONFIG_FILE ]]; then
  CONFIG_FILE=$CASCADING_CONFIG_FILE
fi

if [[ -n $LOCAL_PLATFORM ]]; then
  PLATFORM=$LOCAL_PLATFORM
elif [[ -n $CASCADING_PLATFORM ]]; then
  PLATFORM=$CASCADING_PLATFORM
elif [[ -n $CONFIG_FILE ]]; then
  PLATFORM=`grep '^load.platform.name' $CONFIG_FILE | cut -d\= -f2`
  if [[ -z $PLATFORM ]]; then
    PLATFORM=`grep '^cascading.platform.name' $CONFIG_FILE | cut -d\= -f2`
  fi
fi

if [[ -z $PLATFORM ]]; then
    # backwards compatibility
    PLATFORM=hadoop
fi

OPTIONS=

ARGS=("$@")

while [ -n "$1" ]
 do
     case $1 in
         --platform)
             PLATFORM=$2
             shift 2
             ;;
         --debug)
             OPTIONS="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005 ${OPTIONS}"
             shift
             ;;
         *)  # no more options. Stop while loop
             shift
             ;;
     esac
 done

LOCAL_CLASSPATH=""

case $PLATFORM in
   hadoop)
       source $BIN_DIR/hadoop-env
       EXEC="$HADOOP_EXEC jar $BASE_DIR/platform/$PLATFORM/*.jar"
       ;;
   hadoop2-mr1)
       source $BIN_DIR/yarn-env
       EXEC="$YARN_EXEC jar $BASE_DIR/platform/$PLATFORM/*.jar"
       ;;
   local)
       EXEC="$JAVA_EXEC -cp $BASE_DIR/platform/$PLATFORM/*.jar cascading.load.Main"
       ;;
   *)
       echo "ERROR: Unknown platform: $PLATFORM"
       exit 1
       ;;
esac

LOCAL_BIN_DIR=$BIN_DIR
LOCAL_BASE_DIR=$BASE_DIR

export LOCAL_BIN_DIR
export LOCAL_BASE_DIR
export LOCAL_PLATFORM=$PLATFORM

${EXEC} "${ARGS[@]}" --platform $PLATFORM
